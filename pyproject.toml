# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

# Testing tools configuration
[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true

[tool.pytest.ini_options]
minversion = "6.0"
log_cli_level = "INFO"
markers = ["unstable"]

# Formatting tools configuration
[tool.black]
line-length = 99
target-version = ["py310"]

[tool.isort]
profile = "black"

[tool.poetry]
package-mode = false
requires-poetry = ">=2.0.0"

[tool.poetry.dependencies]
python = "^3.10"
tenacity = "^8.4.2"
pyyaml = "^6.0.1"
requests = "^2.32.3"

# TODO: clean any of the notes below and their deps.
[tool.poetry.group.charm-libs.dependencies]
# data_platform_libs/v0/data_interfaces.py
ops = ">=2.0.0"
# data_platform_libs/v0/upgrade.py
poetry-core = "*"
# tls_certificates_interface/v3/tls_certificates.py
cryptography = "*"
jsonschema = "*"
# data_platform_libs/v0/upgrade.py requires pydantic ^1.10
# grafana_agent/v0/cos_agent.py requires pydantic
pydantic = "^1.10"
# grafana_agent/v0/cos_agent.py
cosl = "*"
data-platform-helpers = "^0.1.4"


[tool.poetry.group.fmt]
optional = true


[tool.poetry.group.fmt.dependencies]
black = "^24.4.2"
isort = "^5.13.2"


[tool.poetry.group.lint]
optional = true


[tool.poetry.group.lint.dependencies]
black = "^24.4.2"
isort = "^5.13.2"
flake8 = "^7.0.0"
flake8-docstrings = "^1.7.0"
flake8-copyright = "^0.2.4"
flake8-builtins = "^2.5.0"
pyproject-flake8 = "^7.0.0"
pep8-naming = "^0.14.1"
codespell = "^2.2.6"
pyright = "^1.1.318"
typing-extensions = "^4.9.0"
requests = "^2.32.3"
ops = "^2.13.0"

[tool.poetry.group.unit]
optional = true

[tool.poetry.group.unit.dependencies]
pytest = "^8.2.2"
coverage = {extras = ["toml"], version = "^7.5.1"}
pytest-mock = "^3.11.1"
pyyaml = "^6.0.1"
responses = "^0.25.3"

[tool.poetry.group.integration.dependencies]
pytest = "^8.2.2"
juju = "~3.6.0"
tenacity = "^8.4.2"
coverage = {extras = ["toml"], version = ">7.0"}
pytest-asyncio = "^0.21.2"
pytest-operator = ">0.20"
pytest-operator-cache = {git = "https://github.com/canonical/data-platform-workflows", tag = "v29.0.0", subdirectory = "python/pytest_plugins/pytest_operator_cache"}
pytest-operator-groups = {git = "https://github.com/canonical/data-platform-workflows", tag = "v29.0.0", subdirectory = "python/pytest_plugins/pytest_operator_groups"}
pytest-microceph = {git = "https://github.com/canonical/data-platform-workflows", tag = "v29.0.0", subdirectory = "python/pytest_plugins/microceph"}
pytest-github-secrets = {git = "https://github.com/canonical/data-platform-workflows", tag = "v29.0.0", subdirectory = "python/pytest_plugins/github_secrets"}
allure-pytest = "^2.13.5"
allure-pytest-collection-report = {git = "https://github.com/canonical/data-platform-workflows", tag = "v29.0.0", subdirectory = "python/pytest_plugins/allure_pytest_collection_report"}

[tool.pyright]
include = ["src"]
extraPaths = ["./lib"]
pythonVersion = "3.10"
pythonPlatform = "All"
typeCheckingMode = "basic"
reportIncompatibleMethodOverride = false
reportImportCycles = false
reportMissingModuleSource = true
reportMissingImports = false
stubPath = ""
